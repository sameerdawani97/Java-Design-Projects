package concurrentSolution;

import com.opencsv.CSVWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A class process the course csv file and initiates the output generation
 */
public class CourseCSVProcessor implements IntegerAndString {

  private String courseFileName;
  private List<String> codeModules;
  private List<String> codePresentations;
  private List<String> modulePresentationLengths;
  private List<String> fileNames;

  /**
   * Constructor for CourseCSVProcessor
   * @param courseFileName - The name of course csv file
   */
  public CourseCSVProcessor(String courseFileName) {
    this.courseFileName = courseFileName;
    this.codeModules = new ArrayList<>();
    this.codePresentations = new ArrayList<>();
    this.modulePresentationLengths = new ArrayList<>();
    this.fileNames = new ArrayList<>();
    this.readCsvFile();
  }

  /**
   * Gets file names generated by class
   * @return List of string names
   */
  public List<String> getFileNames() {
    return this.fileNames;
  }

  /**
   * Loads the csv file into program
   */
  private void readCsvFile(){
    BufferedReader bufferedReader;
    try {
      bufferedReader = new BufferedReader(new FileReader(courseFileName));
      bufferedReader.readLine();
      String line = "";

      while ((line = bufferedReader.readLine()) != null) {
        String[] values = line.split(SEPARATOR);

        for(int i=ZERO;i< values.length;i++){
          values[i]=values[i].replace("\"", "");
        }
        codeModules.add(values[ZERO]);
        codePresentations.add(values[ONE]);
        modulePresentationLengths.add(values[TWO]);
      }
    }  catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Creates empty files for code module and code presentation in the course.csv
   * @throws IOException when directory is not found
   */
  public void createOutputFiles() throws IOException {
    Files.createDirectories(Paths.get(OUTPUT_DIRECTORY));
    for(int i = 0; i < codeModules.size(); i++){
      String fileName = OUTPUT_DIRECTORY+codeModules.get(i) + FILE_NAME_SEPARATOR +
          codePresentations.get(i) + CSV_EXTENSION;
      CSVWriter csvWriter = new CSVWriter(
          new FileWriter(Paths.get(fileName).toFile()));
      this.fileNames.add(fileName);
      csvWriter.flush();
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseCSVProcessor that = (CourseCSVProcessor) o;
    return Objects.equals(courseFileName, that.courseFileName) && Objects.equals(
        codeModules, that.codeModules) && Objects.equals(codePresentations,
        that.codePresentations) && Objects.equals(modulePresentationLengths,
        that.modulePresentationLengths) && Objects.equals(fileNames, that.fileNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseFileName);
  }
}
